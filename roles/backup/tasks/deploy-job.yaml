---

# Launch the backup (as a Job)

- name: Remove existing Backup Job
  k8s:
    state: absent
    definition: "{{ lookup('template', 'job-database-backup.yaml.j2') }}"
    wait: yes

# Delete the Pods left behind that are Completed ('Succeeded').
# Kubernetes *DOES NOT* remove these Job-based Pods automatically
# (see https://kubernetes.io/docs/concepts/workloads/controllers/job/).
# Instead completed Jobs need to be removed manually by the user.
# The logic that follows list all the backup Jobs (Pods)
# that have Succeeded and then deletes them.

- name: Get Succeeded Backup Pods
  k8s_info:
    kind: Pod
    namespace: "{{ backup_namespace }}"
    label_selectors:
    - name=bandr-one-time-backup
    field_selectors:
    - status.phase=Succeeded
  register: pods_result

- name: Delete Succeeded Backup Pods
  k8s:
    kind: Pod
    namespace: "{{ backup_namespace }}"
    name: "{{ item.metadata.name }}"
    state: absent
  loop: "{{ pods_result.resources }}"
  when: pods_result.resources|length > 0

# All clean - start a new Job

- name: Create Backup Job
  k8s:
    definition: "{{ lookup('template', 'job-database-backup.yaml.j2') }}"
    wait: yes

- name: Wait for Backup Job ({{ backup_job_timeout_minutes }} minutes)
  k8s_info:
    kind: Job
    namespace: "{{ backup_namespace }}"
    name: bandr-one-time-backup
  register: result
  until: >-
    result.resources[0].status.completionTime is defined
    or result.resources[0].status.failed is defined
  delay: 60
  retries: "{{ (backup_job_timeout_minutes|int * 60 / 60)|int }}"

# Display Job results

- name: Display Job status
  debug:
    var: result.resources[0].status

- name: Assert Job success
  assert:
    that:
    - result.resources[0].status.succeeded is defined
    - result.resources[0].status.succeeded == 1
    - result.resources[0].status.failed is not defined
