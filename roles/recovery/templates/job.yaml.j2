---
kind: Job
apiVersion: batch/v1
metadata:
  name: recovery
  namespace: {{ recovery_namespace }}
spec:
  selector:
    name: recovery
  template:
    metadata:
      labels:
        name: recovery
    spec:
      serviceAccountName: {{ recovery_sa }}

      containers:
      - name: recovery
{% if recovery_image_registry %}
        image: {{ recovery_image_registry }}/{{ recovery_image }}:{{ recovery_image_tag }}
{% else %}
        image: {{ recovery_image }}:{{ recovery_image_tag }}
{% endif %}
{% if recovery_image_tag in ['latest', 'stable'] %}
        imagePullPolicy: Always
{% else %}
        imagePullPolicy: IfNotPresent
{% endif %}
        terminationMessagePolicy: FallbackToLogsOnError
        env:
        - name: FROM_BACKUP
          value: '{{ recovery_from }}'
        - name: PGHOST
          value: '{{ recovery_host }}'
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ recovery_secret }}
              key: database_admin_user
        - name: PGADMINPASS
          valueFrom:
            secretKeyRef:
              name: {{ recovery_secret }}
              key: database_admin_user_password
{% if recovery_do_not_stop_on_error %}
        - name: DO_NOT_STOP_ON_ERROR
          value: '1'
{% endif %}
{% if recovery_database %}
        - name: DATABASE
          value: '{{ recovery_database }}'
{% endif %}
{% if recovery_database_expected_count %}
        - name: DATABASE_EXPECTED_COUNT
          value: '{{ recovery_database_expected_count }}'
{% endif %}
{% if recovery_latest_backup_maximum_age_h %}
        - name: LATEST_BACKUP_MAXIMUM_AGE_H
          value: '{{ recovery_latest_backup_maximum_age_h|int }}'
{% endif %}
{% if recovery_volume_is_s3 %}
        - name: BACKUP_VOLUME_IS_S3
          value: 'yes'
{% endif %}
{% if recovery_s3_bucket %}
        - name: AWS_BUCKET_NAME
          value: '{{ recovery_s3_bucket }}'
{% endif %}
{% if recovery_s3_access_key_id %}
        - name: AWS_ACCESS_KEY_ID
          value: '{{ recovery_s3_access_key_id }}'
        - name: AWS_SECRET_ACCESS_KEY
          value: '{{ recovery_s3_secret_access_key }}'
        - name: AWS_DEFAULT_REGION
          value: '{{ recovery_s3_default_region }}'
{% endif %}
{% if recovery_use_rclone_bucket_and_path %}
        - name: USE_RCLONE
          value: 'yes'
        - name: USE_RCLONE_BUCKET_AND_PATH
          value: {{ recovery_use_rclone_bucket_and_path }}
        - name: RCLONE_S3_ENDPOINT
          value: {{ recovery_rclone_s3_endpoint }}
        - name: RCLONE_S3_PROVIDER
          value: {{ recovery_rclone_s3_provider }}
{% endif %}
{% if bandr_debug %}
        # POST_DEBUG doesn't need a value - just naming it is enough.
        #            It will be an empty ENV in the container.
        - name: POST_DEBUG
{% endif %}

{% if recovery_volume_is_s3 %}
        # In order to use 'fuse' and mount S3 buckets
        # the container needs to run as 'privileged'
        # and as SYS-ADMIN.
        securityContext:
          privileged: true
          capabilities:
            add:
            - SYS_ADMIN
{% endif %}

        resources:
{% if recovery_cpu_limit or recovery_mem_limit %}
          limits:
{% if recovery_cpu_limit %}
            cpu: {{ recovery_cpu_limit }}
{% endif %}
{% if recovery_mem_limit %}
            memory: {{ recovery_mem_limit }}
{% endif %}
{% endif %}
          requests:
            cpu: {{ recovery_cpu_request }}
            memory: {{ recovery_mem_request }}
{% if not recovery_volume_is_s3 %}
        volumeMounts:
        - name: recovery-data
          mountPath: /recovery
{% endif %}

{% if not recovery_volume_is_s3 %}
      volumes:
      - name: recovery-data
        persistentVolumeClaim:
          claimName: {{ recovery_volume_pvc }}
{% endif %}

      restartPolicy: Never
